#! /bin/sh

set -ex

srcdir="$(dirname "$0")"
test -z "$srcdir" && srcdir=.

cd "$srcdir"

FREESTANDING_TOOLCHAIN_COMMIT_HASH=18a5e52483344e117d45738c9afb2b34792cbced
FREESTANDING_HEADERS_COMMIT_HASH=dd3abd2d7147efc4170dff478d3b7730bed14147
CC_RUNTIME_COMMIT_HASH=38942e9a0d11af77c5d9fb45794850f7a1565d2b
FLANTERM_COMMIT_HASH=545ab1faa8ba7493ae7a43064d520e402ad308b5
PRINTF_COMMIT_HASH=af05afe8ef0f84cb9f3a9bbfd79ac81a941cbebf
MLIBC_COMMIT_HASH=2330b48864786849eb270d16a90d46b7423fc827

AUXFILES="install-sh"

clone_repo_commit() {
    if [ -d $2/.git ]; then
        git -C $2 reset --hard
        git -C $2 clean -fd
        if ! git -C $2 checkout $3; then
            rm -rf $2
        fi
    else
        if [ -d $2 ]; then
            echo "error: '$2' is not a Git repository"
            exit 1
        fi
    fi
    if ! [ -d $2 ]; then
        git clone $1 $2
        git -C $2 checkout $3
    fi
}

if ! [ -f version ]; then
    clone_repo_commit https://github.com/mintsuki/freestanding-toolchain.git build-aux/freestanding-toolchain $FREESTANDING_TOOLCHAIN_COMMIT_HASH
    clone_repo_commit https://github.com/mintsuki/freestanding-headers.git freestanding-headers $FREESTANDING_HEADERS_COMMIT_HASH
    clone_repo_commit https://github.com/mintsuki/cc-runtime.git src/cc-runtime $CC_RUNTIME_COMMIT_HASH

    clone_repo_commit https://github.com/mintsuki/flanterm.git src/flanterm $FLANTERM_COMMIT_HASH

    clone_repo_commit https://github.com/eyalroz/printf.git printf $PRINTF_COMMIT_HASH
    mkdir -p src/printf
    cp -pv printf/src/printf/* src/printf

    clone_repo_commit https://github.com/managarm/mlibc.git mlibc $MLIBC_COMMIT_HASH
    mkdir -p mlibc-build
    cd mlibc-build
    meson setup \
        --cross-file ../cross_file.txt \
        --prefix=/ \
        -Dheaders_only=true \
        -Ddisable_crypt_option=true \
        -Ddisable_iconv_option=true \
        -Ddisable_intl_option=true \
        ../mlibc
    ninja
    mkdir ../mlibc-headers-out
    DESTDIR="$(cd ../mlibc-headers-out && pwd -P)" ninja install
    cd ..
    rm -rf mlibc-headers
    mv mlibc-headers-out/include mlibc-headers
    rm -rf mlibc-build mlibc-headers-out

    [ -f src/limine.h ] || curl -Lo src/limine.h https://github.com/limine-bootloader/limine/raw/trunk/limine.h
fi

for auxfile in $AUXFILES; do
    rm -f build-aux/$auxfile
done

autoreconf -fvi -Wall

# Older versions of autoreconf have a bug where they do not
# install auxiliary files, sometimes... Check if that is the
# case and work around...
for auxfile in $AUXFILES; do
    if ! [ -f build-aux/$auxfile ]; then
        if ! automake --print-libdir >/dev/null 2>&1; then
            echo "error: Broken autoreconf detected, but missing or broken automake."
            echo "       Please make sure automake is installed and working."
            exit 1
        fi
        mkdir -p build-aux
        cp -v "$(automake --print-libdir)/$auxfile" build-aux/
        chmod +x build-aux/$auxfile
    fi
done
